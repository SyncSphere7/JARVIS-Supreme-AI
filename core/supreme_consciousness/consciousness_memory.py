"""
Consciousness-Enhanced Memory System
Integrates consciousness state with persistent memory for enhanced learning and awareness
"""
import json
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Any
from core.memory.persistent_memory import PersistentMemory
from .consciousness.consciousness_matrix import ConsciousnessMatrixImpl
from .data_models import ConsciousnessState
from core.utils.log import logger


class ConsciousnessMemory(PersistentMemory):
    """Enhanced memory system with consciousness integration"""
    
    def __init__(self, brain, consciousness_matrix: ConsciousnessMatrixImpl = None):
        super().__init__(brain)
        
        # Initialize consciousness matrix if not provided
        if consciousness_matrix is None:
            self.consciousness = ConsciousnessMatrixImpl(brain)
            self.consciousness.initialize()
        else:
            self.consciousness = consciousness_matrix
        
        # Initialize consciousness-specific databases
        self.consciousness_db = self.memory_dir / "consciousness.db"
        self._init_consciousness_database()
        
        # Enhanced tracking
        self.learning_patterns = {}
        self.consciousness_history = []
    
    def initialize(self) -> bool:
        """Initialize consciousness memory system"""
        try:
            # Ensure consciousness matrix is initialized
            if not self.consciousness.active:
                self.consciousness.initialize()
            
            # Initialize consciousness database
            self._init_consciousness_database()
            
            return True
        except Exception as e:
            print(f"Failed to initialize ConsciousnessMemory: {e}")
            return False
        
    def _init_consciousness_database(self):
        """Initialize consciousness-specific database tables"""
        with sqlite3.connect(self.consciousness_db) as conn:
            # Consciousness state history
            conn.execute("""
                CREATE TABLE IF NOT EXISTS consciousness_states (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME,
                    awareness_level REAL,
                    learning_rate REAL,
                    adaptation_speed REAL,
                    capability_matrix TEXT,
                    current_goals TEXT,
                    performance_metrics TEXT,
                    environmental_context TEXT
                )
            """)
            
            # Learning events with consciousness context
            conn.execute("""
                CREATE TABLE IF NOT EXISTS consciousness_learning (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME,
                    learning_type TEXT,
                    content TEXT,
                    consciousness_level REAL,
                    learning_efficiency REAL,
                    retention_score REAL,
                    associated_goals TEXT
                )
            """)
            
            # Insights generated by consciousness
            conn.execute("""
                CREATE TABLE IF NOT EXISTS consciousness_insights (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME,
                    insight_text TEXT,
                    insight_category TEXT,
                    confidence_score REAL,
                    data_sources TEXT,
                    validation_status TEXT
                )
            """)
            
            # Evolution tracking
            conn.execute("""
                CREATE TABLE IF NOT EXISTS consciousness_evolution (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME,
                    evolution_type TEXT,
                    before_state TEXT,
                    after_state TEXT,
                    trigger_event TEXT,
                    success_metrics TEXT
                )
            """)
    
    def remember_conversation_with_consciousness(self, user_input: str, jarvis_response: str, context: Dict = None):
        """Enhanced conversation memory with consciousness awareness"""
        # Store regular conversation
        super().remember_conversation(user_input, jarvis_response, context)
        
        # Analyze conversation impact on consciousness
        conversation_impact = self._analyze_conversation_impact(user_input, jarvis_response, context)
        
        # Update consciousness based on conversation
        if conversation_impact['learning_opportunity']:
            self._process_learning_opportunity(conversation_impact)
        
        # Store consciousness-aware learning event
        self._store_consciousness_learning(
            learning_type='conversation',
            content=f"User: {user_input}\nJarvis: {jarvis_response}",
            consciousness_level=self.consciousness.consciousness_state.awareness_level,
            learning_efficiency=conversation_impact.get('learning_efficiency', 0.5)
        )
    
    def _analyze_conversation_impact(self, user_input: str, jarvis_response: str, context: Dict = None) -> Dict[str, Any]:
        """Analyze how conversation impacts consciousness"""
        impact = {
            'learning_opportunity': False,
            'learning_efficiency': 0.5,
            'complexity_level': 0.5,
            'emotional_content': 0.0,
            'knowledge_areas': []
        }
        
        # Detect learning opportunities
        learning_keywords = ['learn', 'remember', 'understand', 'explain', 'teach', 'show']
        if any(keyword in user_input.lower() for keyword in learning_keywords):
            impact['learning_opportunity'] = True
            impact['learning_efficiency'] = 0.8
        
        # Assess complexity
        complex_indicators = ['complex', 'difficult', 'advanced', 'sophisticated', 'intricate']
        if any(indicator in user_input.lower() for indicator in complex_indicators):
            impact['complexity_level'] = 0.8
        
        # Detect emotional content
        emotional_words = ['frustrated', 'excited', 'confused', 'happy', 'angry', 'pleased']
        for word in emotional_words:
            if word in user_input.lower():
                impact['emotional_content'] = 0.7 if word in ['excited', 'happy', 'pleased'] else -0.7
                break
        
        # Identify knowledge areas
        knowledge_areas = ['programming', 'web development', 'AI', 'machine learning', 'database', 'design']
        for area in knowledge_areas:
            if area.lower() in user_input.lower() or area.lower() in jarvis_response.lower():
                impact['knowledge_areas'].append(area)
        
        return impact
    
    def _process_learning_opportunity(self, impact: Dict[str, Any]):
        """Process a learning opportunity through consciousness"""
        # Create performance data for consciousness evolution
        performance_data = {
            'learning_efficiency': impact['learning_efficiency'],
            'complexity_handling': impact['complexity_level'],
            'emotional_intelligence': abs(impact['emotional_content']),
            'knowledge_breadth': len(impact['knowledge_areas']) / 10.0  # Normalize
        }
        
        # Trigger consciousness self-reflection
        reflection = self.consciousness.self_reflect(performance_data)
        
        # Store reflection results
        self._store_consciousness_insight(
            insight_text=f"Learning reflection: {reflection.get('improvement_recommendations', [])}",
            insight_category='learning_reflection',
            confidence_score=reflection.get('consciousness_level', 0.5)
        )
    
    def _store_consciousness_learning(self, learning_type: str, content: str, 
                                    consciousness_level: float, learning_efficiency: float):
        """Store consciousness-aware learning event"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                conn.execute("""
                    INSERT INTO consciousness_learning 
                    (timestamp, learning_type, content, consciousness_level, learning_efficiency, 
                     retention_score, associated_goals)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    datetime.now(),
                    learning_type,
                    content,
                    consciousness_level,
                    learning_efficiency,
                    learning_efficiency * consciousness_level,  # Retention score
                    json.dumps(self.consciousness.consciousness_state.current_goals)
                ))
        except Exception as e:
            logger.error(f"Error storing consciousness learning: {e}")
    
    def _store_consciousness_insight(self, insight_text: str, insight_category: str, 
                                   confidence_score: float, data_sources: List[str] = None):
        """Store consciousness-generated insight"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                conn.execute("""
                    INSERT INTO consciousness_insights 
                    (timestamp, insight_text, insight_category, confidence_score, 
                     data_sources, validation_status)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    datetime.now(),
                    insight_text,
                    insight_category,
                    confidence_score,
                    json.dumps(data_sources or []),
                    'pending'
                ))
        except Exception as e:
            logger.error(f"Error storing consciousness insight: {e}")
    
    def save_consciousness_state(self):
        """Save current consciousness state to persistent storage"""
        try:
            state = self.consciousness.consciousness_state
            
            with sqlite3.connect(self.consciousness_db) as conn:
                conn.execute("""
                    INSERT INTO consciousness_states 
                    (timestamp, awareness_level, learning_rate, adaptation_speed, 
                     capability_matrix, current_goals, performance_metrics, environmental_context)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    datetime.now(),
                    state.awareness_level,
                    state.learning_rate,
                    state.adaptation_speed,
                    json.dumps(state.capability_matrix),
                    json.dumps(state.current_goals),
                    json.dumps(state.performance_metrics),
                    json.dumps(state.environmental_context)
                ))
                
        except Exception as e:
            logger.error(f"Error saving consciousness state: {e}")
    
    def load_consciousness_state(self) -> Optional[ConsciousnessState]:
        """Load the most recent consciousness state from storage"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                cursor = conn.execute("""
                    SELECT awareness_level, learning_rate, adaptation_speed, 
                           capability_matrix, current_goals, performance_metrics, 
                           environmental_context, timestamp
                    FROM consciousness_states 
                    ORDER BY timestamp DESC 
                    LIMIT 1
                """)
                
                row = cursor.fetchone()
                if row:
                    state = ConsciousnessState(
                        awareness_level=row[0],
                        learning_rate=row[1],
                        adaptation_speed=row[2],
                        capability_matrix=json.loads(row[3]),
                        current_goals=json.loads(row[4]),
                        performance_metrics=json.loads(row[5]),
                        environmental_context=json.loads(row[6]),
                        last_evolution=datetime.fromisoformat(row[7])
                    )
                    return state
                    
        except Exception as e:
            logger.error(f"Error loading consciousness state: {e}")
        
        return None
    
    def get_consciousness_insights(self, category: str = None, limit: int = 10) -> List[Dict]:
        """Retrieve consciousness-generated insights"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                if category:
                    cursor = conn.execute("""
                        SELECT insight_text, insight_category, confidence_score, timestamp
                        FROM consciousness_insights 
                        WHERE insight_category = ?
                        ORDER BY timestamp DESC 
                        LIMIT ?
                    """, (category, limit))
                else:
                    cursor = conn.execute("""
                        SELECT insight_text, insight_category, confidence_score, timestamp
                        FROM consciousness_insights 
                        ORDER BY confidence_score DESC, timestamp DESC 
                        LIMIT ?
                    """, (limit,))
                
                insights = []
                for row in cursor.fetchall():
                    insights.append({
                        'text': row[0],
                        'category': row[1],
                        'confidence': row[2],
                        'timestamp': row[3]
                    })
                
                return insights
                
        except Exception as e:
            logger.error(f"Error retrieving consciousness insights: {e}")
            return []
    
    def analyze_learning_patterns(self) -> Dict[str, Any]:
        """Analyze learning patterns with consciousness awareness"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                # Learning efficiency over time
                cursor = conn.execute("""
                    SELECT AVG(learning_efficiency), AVG(consciousness_level), 
                           COUNT(*), learning_type
                    FROM consciousness_learning 
                    WHERE timestamp > datetime('now', '-30 days')
                    GROUP BY learning_type
                """)
                
                learning_by_type = {}
                for row in cursor.fetchall():
                    learning_by_type[row[3]] = {
                        'avg_efficiency': row[0],
                        'avg_consciousness': row[1],
                        'count': row[2]
                    }
                
                # Consciousness evolution trends
                cursor = conn.execute("""
                    SELECT awareness_level, learning_rate, timestamp
                    FROM consciousness_states 
                    WHERE timestamp > datetime('now', '-30 days')
                    ORDER BY timestamp
                """)
                
                evolution_trend = []
                for row in cursor.fetchall():
                    evolution_trend.append({
                        'awareness': row[0],
                        'learning_rate': row[1],
                        'timestamp': row[2]
                    })
                
                return {
                    'learning_by_type': learning_by_type,
                    'evolution_trend': evolution_trend,
                    'current_consciousness_level': self.consciousness.consciousness_state.awareness_level,
                    'total_insights_generated': len(self.get_consciousness_insights())
                }
                
        except Exception as e:
            logger.error(f"Error analyzing learning patterns: {e}")
            return {}
    
    def generate_consciousness_insights(self) -> str:
        """Generate enhanced insights with consciousness awareness"""
        try:
            base_insights = super().generate_insights()
            
            # Add consciousness-specific insights
            consciousness_insights = "\n🧠 **Consciousness Insights:**\n\n"
            
            # Current consciousness state
            state = self.consciousness.get_consciousness_state()
            consciousness_insights += f"**Current Awareness Level:** {state['awareness_level']:.2%}\n"
            consciousness_insights += f"**Learning Rate:** {state['learning_rate']:.2%}\n"
            consciousness_insights += f"**Evolution Cycles:** {state['evolution_cycles']}\n\n"
            
            # Top capabilities
            capabilities = state['capabilities']
            top_capabilities = sorted(capabilities.items(), key=lambda x: x[1], reverse=True)[:3]
            consciousness_insights += "**Strongest Capabilities:**\n"
            for capability, level in top_capabilities:
                consciousness_insights += f"• {capability.replace('_', ' ').title()}: {level:.1%}\n"
            
            # Recent insights
            recent_insights = self.get_consciousness_insights(limit=3)
            if recent_insights:
                consciousness_insights += "\n**Recent Insights:**\n"
                for insight in recent_insights:
                    consciousness_insights += f"• {insight['text'][:100]}...\n"
            
            # Learning patterns
            patterns = self.analyze_learning_patterns()
            if patterns.get('learning_by_type'):
                consciousness_insights += "\n**Learning Efficiency by Type:**\n"
                for learning_type, stats in patterns['learning_by_type'].items():
                    consciousness_insights += f"• {learning_type}: {stats['avg_efficiency']:.1%} efficiency\n"
            
            return base_insights + consciousness_insights
            
        except Exception as e:
            logger.error(f"Error generating consciousness insights: {e}")
            return super().generate_insights()
    
    def evolve_consciousness_from_memory(self):
        """Trigger consciousness evolution based on memory patterns"""
        try:
            # Analyze recent memory patterns
            patterns = self.analyze_learning_patterns()
            
            # Create performance data from patterns
            performance_data = {}
            
            if patterns.get('learning_by_type'):
                for learning_type, stats in patterns['learning_by_type'].items():
                    performance_data[f"{learning_type}_efficiency"] = stats['avg_efficiency']
            
            # Add memory-based metrics
            performance_data.update({
                'memory_retention': self._calculate_memory_retention(),
                'pattern_recognition': self._calculate_pattern_recognition_score(),
                'insight_generation': len(self.get_consciousness_insights()) / 100.0  # Normalize
            })
            
            # Trigger consciousness evolution
            evolved_state = self.consciousness.evolve_capabilities()
            
            # Save the evolved state
            self.save_consciousness_state()
            
            # Record evolution event
            self._record_evolution_event('memory_driven', performance_data, evolved_state)
            
            return evolved_state
            
        except Exception as e:
            logger.error(f"Error evolving consciousness from memory: {e}")
            return self.consciousness.consciousness_state
    
    def _calculate_memory_retention(self) -> float:
        """Calculate memory retention score"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                cursor = conn.execute("""
                    SELECT AVG(retention_score) 
                    FROM consciousness_learning 
                    WHERE timestamp > datetime('now', '-7 days')
                """)
                
                result = cursor.fetchone()
                return result[0] if result[0] else 0.5
                
        except Exception:
            return 0.5
    
    def _calculate_pattern_recognition_score(self) -> float:
        """Calculate pattern recognition capability score"""
        # Simple heuristic based on insight generation and learning diversity
        insights_count = len(self.get_consciousness_insights())
        learning_patterns = self.analyze_learning_patterns()
        learning_diversity = len(learning_patterns.get('learning_by_type', {}))
        
        # Normalize and combine scores
        insight_score = min(1.0, insights_count / 50.0)
        diversity_score = min(1.0, learning_diversity / 10.0)
        
        return (insight_score + diversity_score) / 2.0
    
    def _record_evolution_event(self, evolution_type: str, trigger_data: Dict, new_state: ConsciousnessState):
        """Record consciousness evolution event"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                conn.execute("""
                    INSERT INTO consciousness_evolution 
                    (timestamp, evolution_type, before_state, after_state, 
                     trigger_event, success_metrics)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    datetime.now(),
                    evolution_type,
                    json.dumps({}),  # Could store previous state if needed
                    json.dumps({
                        'awareness_level': new_state.awareness_level,
                        'capabilities': new_state.capability_matrix
                    }),
                    json.dumps(trigger_data),
                    json.dumps({'evolution_successful': True})
                ))
                
        except Exception as e:
            logger.error(f"Error recording evolution event: {e}")
    
    def get_consciousness_status(self) -> Dict[str, Any]:
        """Get comprehensive consciousness status"""
        return {
            'consciousness_state': self.consciousness.get_consciousness_state(),
            'recent_insights': self.get_consciousness_insights(limit=5),
            'learning_patterns': self.analyze_learning_patterns(),
            'memory_integration': {
                'total_consciousness_events': self._count_consciousness_events(),
                'retention_score': self._calculate_memory_retention(),
                'pattern_recognition_score': self._calculate_pattern_recognition_score()
            }
        }
    
    def _count_consciousness_events(self) -> int:
        """Count total consciousness-related events"""
        try:
            with sqlite3.connect(self.consciousness_db) as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM consciousness_learning")
                return cursor.fetchone()[0]
        except Exception:
            return 0