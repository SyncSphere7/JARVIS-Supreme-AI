from core.utils.log import logger
import inspect


class CommandManager:
    def __init__(self):
        # Map of keyword -> zero-arg callable
        self.commands = {}

    def register_command(self, keywords, function):
        """Register one or more keywords to a zero-argument callable."""
        for keyword in keywords:
            key = keyword.strip().lower()
            self.commands[key] = function
            logger.info(f"Registered command for keyword: {key}")

    def execute_command(self, text):
        """Execute the first command whose keyword is a substring of text (case-insensitive)."""
        if not text:
            logger.info("No command detected.")
            return
        original = text.strip()
        lowered = original.lower()
        for keyword, function in self.commands.items():
            if keyword and keyword in lowered:
                try:
                    sig = inspect.signature(function)
                    params = [p for p in sig.parameters.values() if p.kind in (p.POSITIONAL_ONLY, p.POSITIONAL_OR_KEYWORD)]
                    if len(params) >= 1:
                        function(original)
                    else:
                        function()
                except Exception as e:
                    logger.error(f"Error executing command '{keyword}': {e}")
                return
        logger.info("Unknown command. Say 'help' to list capabilities.")

    def get_keywords(self):
        return sorted(self.commands.keys())

    def print_help(self):
        help_text = """
ü§ñ **JARVIS AI ASSISTANT - COMMAND REFERENCE**

**üéØ GOAL EXECUTION:**
‚Ä¢ execute goal [description] - Execute complex autonomous goals
‚Ä¢ list goals - Show active goals
‚Ä¢ cancel goal [id] - Cancel a specific goal

**üåê WEB DEVELOPMENT:**
‚Ä¢ create website [description] - Build complete websites
‚Ä¢ enhance design [project] - Improve website design
‚Ä¢ deploy website [project] - Deploy to production

**üîç RESEARCH & ANALYSIS:**
‚Ä¢ search web [query] - Search the internet
‚Ä¢ research topic [topic] - Deep research analysis
‚Ä¢ analyze website [url] - Comprehensive website analysis
‚Ä¢ analyze https://example.com - Direct URL analysis
‚Ä¢ scrape website [url] - Extract data from websites
‚Ä¢ scrape data from https://example.com - Advanced web scraping

**üñ•Ô∏è SYSTEM CONTROL:**
‚Ä¢ health check - Check system health
‚Ä¢ update status - Check autonomous update status
‚Ä¢ force update - Force immediate system update
‚Ä¢ auto update start/stop - Control auto-updates

**ü§ñ MACHINE LEARNING:**
‚Ä¢ automl - Automated ML pipeline (data to model)
‚Ä¢ train model - Train custom ML models
‚Ä¢ list models - Show all trained models
‚Ä¢ predict [model_id] - Make predictions

**üåê WEB AUTOMATION:**
‚Ä¢ create api account - Autonomously create API accounts
‚Ä¢ shop online - Autonomous online shopping
‚Ä¢ solve captcha - Bypass captcha challenges
‚Ä¢ browse website - Human-like web browsing

**üéØ UNIVERSAL ORCHESTRATION:**
‚Ä¢ create workflow - Automate ANY complex web process
‚Ä¢ create automation json - Generate automation configs
‚Ä¢ deploy automation - Deploy to n8n/Zapier/Make
‚Ä¢ automate [description] - Execute complex workflows

**üìã EXAMPLE WORKFLOWS:**
‚Ä¢ "Create n8n account, set up Google Sheets to Slack automation"
‚Ä¢ "Deploy my app to Vercel with GitHub integration"
‚Ä¢ "Set up Stripe payments with webhook notifications"
‚Ä¢ "Create Twitter bot with OpenAI integration"

**üíª CODING ASSISTANT:**
‚Ä¢ generate code [description] - AI-powered code generation
‚Ä¢ debug code - Debug and fix code issues
‚Ä¢ analyze code [file] - Code quality analysis
‚Ä¢ optimize code - Performance optimization
‚Ä¢ Support for: Python, JavaScript, Java, C++, HTML, CSS

**üöÄ AUTONOMOUS APP BUILDER:**
‚Ä¢ build app [description] - Build complete full-stack applications
‚Ä¢ enhance app - Add features to existing apps
‚Ä¢ deploy app - Deploy apps to production
‚Ä¢ add integration - Add third-party integrations
‚Ä¢ Platforms: Web, iOS, Android, Cross-platform
‚Ä¢ Auto-generates: Frontend, Backend, Database, Tests, Docs
‚Ä¢ Integrations: Stripe, Firebase, OpenAI, Supabase, Auth0

**üìÑ OUTPUT FORMATS:**
‚Ä¢ All results can be exported to: PDF, Word, Excel, JSON, CSV
‚Ä¢ Automatic export options for analysis and scraping results
‚Ä¢ Professional reports with charts and formatting

**üí¨ CONVERSATION:**
‚Ä¢ Just type naturally - Jarvis understands natural language
‚Ä¢ help - Show this help
‚Ä¢ exit/quit - Exit Jarvis

**üöÄ AUTONOMOUS FEATURES:**
‚Ä¢ 24/7 auto-updates and improvements
‚Ä¢ Self-repair and error recovery
‚Ä¢ Continuous learning and evolution

Type any command or just talk naturally to Jarvis!
"""
        print(help_text)